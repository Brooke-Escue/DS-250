---
title: "Client Report - [Finding the Best Airlines]"
subtitle: "Course DS 250"
execute:
    warning: false
author: "[Brooke Escue]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

```{python}

#| label: libraries
#| include: false
import pandas as pd
import altair as alt
import numpy as np
import json
from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate

```




```{python}
#| label: project data
#| code-summary: Read and format project data

# airport_name.value_counts is an important function for reading data 

flights = pd.read_json("flights.json")

flights.head()
flights.airport_name.unique()
flights.airport_name.unique()

flights.month.value_counts()

```


## GRAND QUESTION 1

Which airport has the worst delays? Discuss the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.

The airport that has the worst delays is SFO airport.  Looking at the chart, the proportional delays was 0.26, giving it the worst amount of delays. 

```{python}
#| label: GQ1

# replace 1500+, Febuary, -999)

clean2 = (flights
    .replace(-999, np.nan)
    .replace("1500+", "1500")
    .query("month != 'n/a'")
    .assign(

        num_of_delays_carrier2 = lambda x: x[["num_of_delays_carrier"]].astype(int),
        junk_column = lambda x: x.num_of_delays_carrier2 + x.num_of_delays_late_aircraft 

    )
    
)
mean = clean2.num_of_delays_carrier.mean()
clean2


```


```{python}
#| label: GQ3 table

(clean2
    .groupby("airport_code")
    .agg(
        total_flights = ("num_of_flights_total", np.sum), 
        total_delays = ("num_of_delays_total", np.sum),
    )
    .assign (prop_delays = lambda x: x.total_delays / x.total_flights)
    
    .reset_index()
    
)


```


## Grand Question 2 

The best month to fly out of is September.  September has about a 17% proportional delays.  It is very close proportinally to November.  Those two months are the best to fly out of.  December is by far the worst month.

```{python}

# Try to find the best month to fly out of, using the proportions

df2 = clean2.assign(
month = lambda x: x.month.replace('n/a', np.NaN))
# %%
df2_mo = df2.dropna(subset = ['month'])
df3 = df2_mo.assign(
    proportion_delayed_flights = df2_mo.num_of_delays_total/df2_mo.num_of_flights_total,
)
# %%
df4 = df3.groupby('month').proportion_delayed_flights.mean().reset_index()
df5 = df4.replace('Febuary', 'February')

month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# %%
bars = alt.Chart(df5, title = 'Proportion of Delayed Flights by Month', width = 400).mark_bar().encode(
    color = alt.Color('month',sort=month),
    x = alt.X('month',sort = month, title = 'Month'),
    y = alt.Y('proportion_delayed_flights', axis=alt.Axis(format='%'), title= "Proportion Delayed Flights",
    )   
)
bars
```



## Grand Question 3 

According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:

100% of delayed flights in the Weather category are due to weather
30% of all delayed flights in the Late-Arriving category are due to weather.  The number of flights delayed is 897.  From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 60%.

```{python}
#| label: GQ4


weather = clean2.assign(
    severe = lambda x: x.num_of_delays_weather,
    # dla_replace is assigned pd NAN, in place of -999 so can replace with mean
    dla_replace = lambda x: x.num_of_delays_late_aircraft.replace(-999, np.NaN),
    # replace NAN with mean
    mild_late = lambda x: x.dla_replace.fillna(x.dla_replace.mean()
    ),
    # NAS 40% & 60% accdg to month
    mild = lambda x: np.where(x.month.isin(['April', 'May', 'June', 'July', 'August']),
    x.num_of_delays_nas * 0.40,
    x.num_of_delays_nas * 0.60
    ),
    # add all the variables of weather
    weather = lambda x: x.severe + x.mild_late + x.mild,
    percent_weather = lambda x: round((x.weather / x.num_of_delays_total * 100),2) 
    ).filter(['airport_code', 'month', 'severe', 'mild', 'mild_late', 'weather', 'num_of_delays_total', 'percent_weather'])
weather['Percent_weather'] = weather.percent_weather.apply(lambda x: str(x) + '%')
# %%
weather.describe()


```

## Grand question 4 
Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.

```{python}
weather1 = weather.assign(
month = lambda x: x.month.replace('n/a', np.NaN))
# %%
weather2 = weather1.dropna(subset = ['month'])
weather2 = weather2.replace('Febuary', 'February')
weather2
# %%
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# chart representing airports and portion of late flights by month.
# %%
weather_chart = alt.Chart(weather2, title = "Weather Delayed Flights", width = 300).mark_bar().encode(
    alt.Y("percent_weather", title = "Proportion Delayed Flights"), 
    alt.X('airport_code', title= 'Airport Code'),

    color = 'airport_code'
)
weather_chart
```

## Grand Question 5 
Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value

```{python}

reformat = flights.replace(-999, np.nan).replace("", np.nan)


reformat = flights.replace([-999, ""], np.nan).iloc[0:1,:]


reformat.isnull().sum()

reformat.to_json("my_flights_data.json")

json_data = reformat.to_json()


json_data = reformat.to_json(orient= "records")
json_object = json.loads(json_data)
json_formatted_str = json.dumps(json_object, indent = 4)
print(json_formatted_str)

```

